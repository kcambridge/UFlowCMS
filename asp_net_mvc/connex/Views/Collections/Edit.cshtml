@model connex.ViewModels.CollectionEditViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    if (ViewBag.Return_Home != null)
    {
        @Html.Hidden("Return_Home", true)
    }
    <div class="form-horizontal">
        <h4>Collection</h4>
        <hr />
        <span class="text-danger">@Html.ValidationSummary(true)</span>
        @Html.HiddenFor(model => model.Collection_ID)
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">Collection Details</h3>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Collection_Title, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.Collection_Title, new{@class="form-control col-md-5"})
                        @Html.ValidationMessageFor(model => model.Collection_Title)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Collection_Description, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Collection_Description, new {@class="form-control col-md-5", @rows="5"})
                        @Html.ValidationMessageFor(model => model.Collection_Description)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Display_Mode_ID, "Display Mode", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select class="form-control" id="Display_Mode_ID" name="Display_Mode_ID">
                             @foreach (var dispMode in Model.availableDisplayModes)
                             {
                                 if (Model.Display_Mode_ID != null)
                                 {
                                     if (Model.Display_Mode_ID == dispMode.Display_Mode_ID)
                                     {
                                         <option value="@dispMode.Display_Mode_ID" selected="selected">@dispMode.Display_Mode</option>
                                     }
                                     else
                                     {
                                         <option value="@dispMode.Display_Mode_ID">@dispMode.Display_Mode</option>
                                     }
                                 }
                                 else
                                 {
                                     <option value="@dispMode.Display_Mode_ID">@dispMode.Display_Mode</option>
                                 }
                             }
                        </select>
                        @Html.ValidationMessageFor(model => model.Display_Mode_ID)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Archived, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Archived)
                        @Html.ValidationMessageFor(model => model.Archived)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save Changes" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>

    </div>
}

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Posts</h3>
    </div>
    <div class="panel-body">
    @Html.ActionLink("Add New Post", "Create", "Posts", new { Collection_ID = Model.Collection_ID, Page_ID = Model.Page_ID }, new { @class = "btn btn-default", @role="button"})
    <br />
    <br />
    @if (Model.posts != null)
    {
        <div class="container">
            @foreach (var post in Model.posts.Where(x => x.Archived == false).OrderByDescending(y => y.Date_Added))
            {
                <div class="row row-trim">
                    <br />
                    <div class="col-md-3">
                        <div class="thumbnail">
                            <img src="~/@post.Thumb_Path" alt="No Image" class="img-responsive">
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="caption">
                            <h3>@post.Header</h3>
                            <span class="label label-info">Posted on @post.Date_Added.Value.ToShortDateString()</span>
                            <br /><br />
                            <p>@post.Summary</p>
                            <p>
                                @Html.ActionLink("Edit", "Edit", "Posts", new { Post_ID = post.Post_ID, Page_ID = Model.Page_ID, Collection_ID = Model.Collection_ID}, new {@class="btn btn-primary", @role="button"})
                                @using (Html.BeginForm("Archive", "Posts", FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("Collection_ID", Model.Collection_ID)
                                    @Html.Hidden("Page_ID", Model.Page_ID)
                                    @Html.Hidden("Post_ID", post.Post_ID)
                                    <button type="submit" class="btn btn-primary" role="button" >Archive</button>
                                }
                            </p>
                        </div>
                    </div>
                </div>
                <br />
            }
        </div>
    }
    </div>
</div>

<div>
    
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
